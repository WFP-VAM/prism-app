# for comment on PR, follow instruction for: https://github.com/marketplace/actions/sticky-pull-request-comment
name: PRISM CI
on:
  # Run on all pull requests and on pushes to master.
  pull_request:
  push:
    branches:
      - master

jobs:
  frontend_tests:
    name: frontend_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: yarn lint
        run: yarn lint

      - name: yarn test
        run: yarn test

      - name: json check
        run: yarn prettier:json-check
  frontend_build_and_deploy:
    needs: frontend_tests
    name: frontend_build_and_deploy
    runs-on: ubuntu-latest
    env:
      surge_url: prism-${{ github.event.pull_request.number }}.surge.sh
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: test
        run: |
          echo "My current surge url is ${{ env.surge_url }}"

      - name: Get yarn cache directory path

        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies if needed.
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Find country variable
        id: country_regex
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.event.pull_request.title }}
          regex: 'COUNTRY=(\w+)'
      - name: Echo country variable
        run: echo "Country env is ${{ steps.country_regex.outputs.group1 }}"

      - name: build frontend
        run: GENERATE_SOURCEMAP=false REACT_APP_COUNTRY=${{ steps.country_regex.outputs.group1 }} yarn build
      - name: deploy on surge
        uses: dswistowski/surge-sh-action@v1
        with:
          domain: ${{ env.surge_url }}
          project: 'build/.'
          login: ${{ secrets.surge_login }}
          token: ${{ secrets.surge_token }}
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M:%S')"
      - name: Comment PR
        uses: marocchino/sticky-pull-request-comment@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            Build succeeded and deployed at http://${{ env.surge_url }} 
            (hash ${{ github.event.pull_request.head.sha }} deployed at ${{ steps.date.outputs.date }})
  api_lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
      # run the matrix jobs one after the other, so they can benefit from caching
      max-parallel: 1

    steps:
      - uses: actions/checkout@v2
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          # Version of Poetry to use
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: |
          poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Check formatting with black and isort
        run: |
          poetry run black --check .
          poetry run isort --check .

  api_build:
    name: build api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Docker Compose
        run: |
          curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
          chmod +x ~/docker-compose
          sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - name: Build containers
        run: cd api && docker-compose build api
      - name: Run tests
        run: cd api && make api-test
